<?xml version="1.0"?><object javaVersion="1.8.0_92" class="test.test3">
<properties>
<property name="alBoundaries" type="ArrayList[String]" description="Contains known sentence boundaries from text input">
<propertyValue index="0">\n</propertyValue>
<propertyValue index="1">."</propertyValue>
<propertyValue index="2">? </propertyValue>
<propertyValue index="3">. </propertyValue>
<propertyValue index="4">. </propertyValue>
<propertyValue index="5">! </propertyValue>
</property>

<property name="alNames" type="ArrayList[String]" description="Contains proper nouns/names from text input">
<propertyValue index="0">Ernst Haeckel</propertyValue>
<propertyValue index="1">Franz Ferdinand</propertyValue>
<propertyValue index="2">Gavrilo Princip</propertyValue>
<propertyValue index="3">Germany</propertyValue>
<propertyValue index="4">Austria-Hungary</propertyValue>
<propertyValue index="5">Yugoslavia</propertyValue>
<propertyValue index="6">Serbia</propertyValue>
<propertyValue index="7">Sarajevo</propertyValue>
<propertyValue index="8">Europe</propertyValue>
<propertyValue index="9">Euclid</propertyValue>
<propertyValue index="10">Elements</propertyValue>
<propertyValue index="11">Venice</propertyValue>
<propertyValue index="12">Carl Benjamin Boyer</propertyValue>
<propertyValue index="13">Bible</propertyValue>
<propertyValue index="14">Broyden–Fletcher–Goldfarb–Shanno</propertyValue>
<propertyValue index="15">Newton</propertyValue>
<propertyValue index="16">BFGS</propertyValue>
<propertyValue index="17">Montgomery Castle</propertyValue>
<propertyValue index="18">Powys</propertyValue>
<propertyValue index="19">Wales</propertyValue>
<propertyValue index="20">England</propertyValue>
<propertyValue index="21">Roger de Montgomery</propertyValue>
<propertyValue index="22">Robert of Belleme</propertyValue>
<propertyValue index="23">King Henry III</propertyValue>
<propertyValue index="24">Llywelyn ap Gruffudd</propertyValue>
<propertyValue index="25">Prince of Wales</propertyValue>
<propertyValue index="26">Shrewsbury</propertyValue>
<propertyValue index="27">Antikythera</propertyValue>
<propertyValue index="28">Olympic Games</propertyValue>
<propertyValue index="29">Japan</propertyValue>
<propertyValue index="30">North America</propertyValue>
<propertyValue index="31">Sun Microsystems</propertyValue>
<propertyValue index="32">Sun</propertyValue>
<propertyValue index="33">Oracle Corporation</propertyValue>
<propertyValue index="34">Apollo 11</propertyValue>
<propertyValue index="35">Neil Armstrong</propertyValue>
<propertyValue index="36">Buzz Aldrin</propertyValue>
<propertyValue index="37">Michael Collins</propertyValue>
<propertyValue index="38">Moon</propertyValue>
<propertyValue index="39">Sea of Tranquility</propertyValue>
<propertyValue index="40">Earth</propertyValue>
<propertyValue index="41">Pacific Ocean</propertyValue>
<propertyValue index="42">James Clerk Maxwell</propertyValue>
<propertyValue index="43">Isaac Newton</propertyValue>
<propertyValue index="44">Albert Einstein</propertyValue>
<propertyValue index="45"></propertyValue>
</property>

<property name="workerThread" type="object" description="workerThread inner class - spun off as a thread">
<innerObject>
<properties>

<property name="alSentences" type="ArrayList[String]" description="Contains sentences from text input">
<propertyValue index="0">The <properNoun>Broyden–Fletcher–Goldfarb–Shanno</properNoun> (<properNoun>BFGS</properNoun>) algorithm is an iterative method for solving unconstrained nonlinear optimization problems. </propertyValue>
<propertyValue index="1">The <properNoun>BFGS</properNoun> method approximates <properNoun>Newton</properNoun>'s method, a class of hill-climbing optimization techniques that seeks a stationary point of a (preferably twice continuously differentiable) function. </propertyValue>
<propertyValue index="2">For such problems, a necessary condition for optimality is that the gradient be zero. </propertyValue>
<propertyValue index="3"><properNoun>Newton</properNoun>'s method and the <properNoun>BFGS</properNoun> methods are not guaranteed to converge unless the function has a quadratic Taylor expansion near an optimum. </propertyValue>
<propertyValue index="4">These methods use both the first and second derivatives of the function. </propertyValue>
<propertyValue index="5">However, <properNoun>BFGS</properNoun> has proven to have good performance even for non-smooth optimizations. </propertyValue>
</property>

<property name="alWords" type="ArrayList[String]" description="Contains words from text input">
<propertyValue index="0">The</propertyValue>
<propertyValue index="1">Broyden–Fletcher–Goldfarb–Shanno</propertyValue>
<propertyValue index="2">(BFGS)</propertyValue>
<propertyValue index="3">algorithm</propertyValue>
<propertyValue index="4">is</propertyValue>
<propertyValue index="5">an</propertyValue>
<propertyValue index="6">iterative</propertyValue>
<propertyValue index="7">method</propertyValue>
<propertyValue index="8">for</propertyValue>
<propertyValue index="9">solving</propertyValue>
<propertyValue index="10">unconstrained</propertyValue>
<propertyValue index="11">nonlinear</propertyValue>
<propertyValue index="12">optimization</propertyValue>
<propertyValue index="13">problems.|</propertyValue>
<propertyValue index="14">The</propertyValue>
<propertyValue index="15">BFGS</propertyValue>
<propertyValue index="16">method</propertyValue>
<propertyValue index="17">approximates</propertyValue>
<propertyValue index="18">Newton's</propertyValue>
<propertyValue index="19">method,</propertyValue>
<propertyValue index="20">a</propertyValue>
<propertyValue index="21">class</propertyValue>
<propertyValue index="22">of</propertyValue>
<propertyValue index="23">hill-climbing</propertyValue>
<propertyValue index="24">optimization</propertyValue>
<propertyValue index="25">techniques</propertyValue>
<propertyValue index="26">that</propertyValue>
<propertyValue index="27">seeks</propertyValue>
<propertyValue index="28">a</propertyValue>
<propertyValue index="29">stationary</propertyValue>
<propertyValue index="30">point</propertyValue>
<propertyValue index="31">of</propertyValue>
<propertyValue index="32">a</propertyValue>
<propertyValue index="33">(preferably</propertyValue>
<propertyValue index="34">twice</propertyValue>
<propertyValue index="35">continuously</propertyValue>
<propertyValue index="36">differentiable)</propertyValue>
<propertyValue index="37">function.|</propertyValue>
<propertyValue index="38">For</propertyValue>
<propertyValue index="39">such</propertyValue>
<propertyValue index="40">problems,</propertyValue>
<propertyValue index="41">a</propertyValue>
<propertyValue index="42">necessary</propertyValue>
<propertyValue index="43">condition</propertyValue>
<propertyValue index="44">for</propertyValue>
<propertyValue index="45">optimality</propertyValue>
<propertyValue index="46">is</propertyValue>
<propertyValue index="47">that</propertyValue>
<propertyValue index="48">the</propertyValue>
<propertyValue index="49">gradient</propertyValue>
<propertyValue index="50">be</propertyValue>
<propertyValue index="51">zero.|</propertyValue>
<propertyValue index="52">Newton's</propertyValue>
<propertyValue index="53">method</propertyValue>
<propertyValue index="54">and</propertyValue>
<propertyValue index="55">the</propertyValue>
<propertyValue index="56">BFGS</propertyValue>
<propertyValue index="57">methods</propertyValue>
<propertyValue index="58">are</propertyValue>
<propertyValue index="59">not</propertyValue>
<propertyValue index="60">guaranteed</propertyValue>
<propertyValue index="61">to</propertyValue>
<propertyValue index="62">converge</propertyValue>
<propertyValue index="63">unless</propertyValue>
<propertyValue index="64">the</propertyValue>
<propertyValue index="65">function</propertyValue>
<propertyValue index="66">has</propertyValue>
<propertyValue index="67">a</propertyValue>
<propertyValue index="68">quadratic</propertyValue>
<propertyValue index="69">Taylor</propertyValue>
<propertyValue index="70">expansion</propertyValue>
<propertyValue index="71">near</propertyValue>
<propertyValue index="72">an</propertyValue>
<propertyValue index="73">optimum.|</propertyValue>
<propertyValue index="74">These</propertyValue>
<propertyValue index="75">methods</propertyValue>
<propertyValue index="76">use</propertyValue>
<propertyValue index="77">both</propertyValue>
<propertyValue index="78">the</propertyValue>
<propertyValue index="79">first</propertyValue>
<propertyValue index="80">and</propertyValue>
<propertyValue index="81">second</propertyValue>
<propertyValue index="82">derivatives</propertyValue>
<propertyValue index="83">of</propertyValue>
<propertyValue index="84">the</propertyValue>
<propertyValue index="85">function.|</propertyValue>
<propertyValue index="86">However,</propertyValue>
<propertyValue index="87">BFGS</propertyValue>
<propertyValue index="88">has</propertyValue>
<propertyValue index="89">proven</propertyValue>
<propertyValue index="90">to</propertyValue>
<propertyValue index="91">have</propertyValue>
<propertyValue index="92">good</propertyValue>
<propertyValue index="93">performance</propertyValue>
<propertyValue index="94">even</propertyValue>
<propertyValue index="95">for</propertyValue>
<propertyValue index="96">non-smooth</propertyValue>
<propertyValue index="97">optimizations.|</propertyValue>
</property>

<property name="strFile" type="String" description="String denoting input file (txt) for data (e.g. d01.txt)">
</property>

<property name="strOutFile" type="String" description="String denoting output file (XML) for data (e.g. d01.xml)">
</property>
</properties>

<methods>
<method name="WorkerThread" parameters="[String],[String]" description="WorkerThread Class Constructor"></method>
<method name="Left" parameters="[String],[int]" description="Returns characters from left side of a string"></method>
<method name="Right" parameters="[String],[int]" description="Returns characters from right side of a string"></method>
<method name="assembleSentences()" parameters="" description="Assembles text input words into sentences and stores in ArrayList[String]"></method>
<method name="getByWord" parameters="" description="Gets words from text input and stores in ArrayList[String]"></method>
<method name="getNames" parameters="[String]" description="Marks words that fall at the end of a sentence"></method>
<method name="isEndWord" parameters="[String]" description="Marks words that fall at the end of a sentence"></method>
<method name="outputToXML" parameters="[String]" description="Outputs object schema in readable XML"></method>
<method name="processCommand" parameters="" description="Outputs object schema in readable XML"></method>
<method name="run" parameters="" description="Outputs object schema in readable XML"></method>
<method name="tagNames" parameters="" description="Marks proper nouns/names in sentences by surrounding with properNoun tags"></method>
<method name="writeToFile" parameters="[String],[String]" description="Writes data to a file"></method>
</methods>
</innerObject>
</property>
</properties>

<methods>
<method name="createFolder" parameters="[String]" description="Creates output folder if it doesn't exist"></method>
</methods></object>